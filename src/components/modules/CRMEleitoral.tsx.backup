'use client';

import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  Users, UserPlus, Target, TrendingUp, TrendingDown, Mail,
  MessageSquare, Phone, MapPin, Calendar, DollarSign, Award,
  Filter, Search, Download, Upload, Settings, BarChart3,
  PieChart, Activity, Clock, Star, Heart, Zap, Globe,
  Smartphone, Monitor, Headphones, FileText, Send
} from 'lucide-react';
import { LineChart, Line, AreaChart, Area, PieChart as RechartsPieChart, Cell, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Pie } from 'recharts';

interface MetricaCRM {
  label: string;
  valor: number | string;
  variacao?: number;
  meta?: number;
  tipo: 'eleitores' | 'engajamento' | 'conversao' | 'financeiro';
  icone: any;
  cor: string;
  status: 'excelente' | 'bom' | 'atencao' | 'critico';
}

interface EleitorResumo {
  id: string;
  nome: string;
  email?: string;
  telefone?: string;
  cidade: string;
  estado: string;
  status: 'LEAD' | 'INTERESSADO' | 'SIMPATIZANTE' | 'APOIADOR' | 'EMBAIXADOR' | 'INATIVO' | 'ADVERSARIO';
  score: number;
  nivelEngajamento: 'MUITO_BAIXO' | 'BAIXO' | 'MEDIO' | 'ALTO' | 'MUITO_ALTO';
  probabilidadeVoto: number;
  ultimaInteracao: Date;
  totalInteracoes: number;
  canalPreferido: string;
  segmento?: string;
}

interface SegmentoResumo {
  id: string;
  nome: string;
  descricao: string;
  cor: string;
  tamanhoReal: number;
  taxaConversao: number;
  custoMedioAquisicao: number;
  valorVidaEleitor: number;
  crescimento: number;
}

interface CampanhaResumo {
  id: string;
  nome: string;
  tipo: string;
  status: string;
  totalEnviados: number;
  taxaEntrega: number;
  taxaAbertura: number;
  taxaClique: number;
  taxaConversao: number;
  roi: number;
  dataInicio: Date;
}

export default function CRMEleitoral({ candidateId }: { candidateId: string }) {
  const [metricas, setMetricas] = useState<MetricaCRM[]>([]);
  const [eleitores, setEleitores] = useState<EleitorResumo[]>([]);
  const [segmentos, setSegmentos] = useState<SegmentoResumo[]>([]);
  const [campanhas, setCampanhas] = useState<CampanhaResumo[]>([]);
  const [filtroTempo, setFiltroTempo] = useState('30d');
  const [modoVisualizacao, setModoVisualizacao] = useState<'dashboard' | 'eleitores' | 'segmentos' | 'campanhas' | 'funil' | 'analytics'>('dashboard');

  // Simulação de dados
  useEffect(() => {
    const metricasSimuladas: MetricaCRM[] = [
      {
        label: 'Total de Eleitores',
        valor: '2.847.392',
        variacao: 12.5,
        meta: 3000000,
        tipo: 'eleitores',
        icone: Users,
        cor: 'blue',
        status: 'bom'
      },
      {
        label: 'Novos Eleitores',
        valor: '18.247',
        variacao: 8.3,
        tipo: 'eleitores',
        icone: UserPlus,
        cor: 'green',
        status: 'excelente'
      },
      {
        label: 'Taxa de Conversão',
        valor: '23.8%',
        variacao: 2.1,
        meta: 25,
        tipo: 'conversao',
        icone: Target,
        cor: 'purple',
        status: 'bom'
      },
      {
        label: 'Apoiadores Ativos',
        valor: '847.392',
        variacao: 15.2,
        tipo: 'eleitores',
        icone: Heart,
        cor: 'red',
        status: 'excelente'
      },
      {
        label: 'Embaixadores',
        valor: '12.847',
        variacao: 18.7,
        tipo: 'eleitores',
        icone: Award,
        cor: 'yellow',
        status: 'excelente'
      },
      {
        label: 'Score Médio',
        valor: '687',
        variacao: 5.4,
        meta: 750,
        tipo: 'engajamento',
        icone: Star,
        cor: 'orange',
        status: 'bom'
      },
      {
        label: 'Engajamento Médio',
        valor: '74.2%',
        variacao: 3.8,
        tipo: 'engajamento',
        icone: Activity,
        cor: 'cyan',
        status: 'excelente'
      },
      {
        label: 'ROI Campanhas',
        valor: '340%',
        variacao: 12.1,
        tipo: 'financeiro',
        icone: DollarSign,
        cor: 'emerald',
        status: 'excelente'
      }
    ];

    const eleitoresSimulados: EleitorResumo[] = [
      {
        id: '1',
        nome: 'Maria Silva Santos',
        email: 'maria.silva@email.com',
        telefone: '(11) 99999-9999',
        cidade: 'São Paulo',
        estado: 'SP',
        status: 'EMBAIXADOR',
        score: 950,
        nivelEngajamento: 'MUITO_ALTO',
        probabilidadeVoto: 0.95,
        ultimaInteracao: new Date(Date.now() - 2 * 60 * 60 * 1000),
        totalInteracoes: 247,
        canalPreferido: 'WhatsApp',
        segmento: 'Lideranças Femininas'
      },
      {
        id: '2',
        nome: 'João Carlos Oliveira',
        email: 'joao.oliveira@email.com',
        telefone: '(21) 98888-8888',
        cidade: 'Rio de Janeiro',
        estado: 'RJ',
        status: 'APOIADOR',
        score: 780,
        nivelEngajamento: 'ALTO',
        probabilidadeVoto: 0.85,
        ultimaInteracao: new Date(Date.now() - 5 * 60 * 60 * 1000),
        totalInteracoes: 156,
        canalPreferido: 'Email',
        segmento: 'Profissionais Liberais'
      },
      {
        id: '3',
        nome: 'Ana Paula Costa',
        telefone: '(85) 97777-7777',
        cidade: 'Fortaleza',
        estado: 'CE',
        status: 'SIMPATIZANTE',
        score: 520,
        nivelEngajamento: 'MEDIO',
        probabilidadeVoto: 0.65,
        ultimaInteracao: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000),
        totalInteracoes: 89,
        canalPreferido: 'Instagram',
        segmento: 'Jovens Universitários'
      },
      {
        id: '4',
        nome: 'Roberto Ferreira Lima',
        email: 'roberto.lima@email.com',
        cidade: 'Belo Horizonte',
        estado: 'MG',
        status: 'INTERESSADO',
        score: 340,
        nivelEngajamento: 'BAIXO',
        probabilidadeVoto: 0.45,
        ultimaInteracao: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000),
        totalInteracoes: 23,
        canalPreferido: 'Facebook',
        segmento: 'Trabalhadores Rurais'
      },
      {
        id: '5',
        nome: 'Carla Mendes Souza',
        email: 'carla.souza@email.com',
        telefone: '(47) 96666-6666',
        cidade: 'Florianópolis',
        estado: 'SC',
        status: 'LEAD',
        score: 180,
        nivelEngajamento: 'MUITO_BAIXO',
        probabilidadeVoto: 0.25,
        ultimaInteracao: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),
        totalInteracoes: 5,
        canalPreferido: 'SMS',
        segmento: 'Novos Contatos'
      }
    ];

    const segmentosSimulados: SegmentoResumo[] = [
      {
        id: '1',
        nome: 'Lideranças Femininas',
        descricao: 'Mulheres em posições de liderança, empresárias e profissionais influentes',
        cor: '#EC4899',
        tamanhoReal: 45892,
        taxaConversao: 0.34,
        custoMedioAquisicao: 12.50,
        valorVidaEleitor: 450.00,
        crescimento: 18.7
      },
      {
        id: '2',
        nome: 'Profissionais Liberais',
        descricao: 'Médicos, advogados, engenheiros e outros profissionais autônomos',
        cor: '#3B82F6',
        tamanhoReal: 123456,
        taxaConversao: 0.28,
        custoMedioAquisicao: 15.80,
        valorVidaEleitor: 380.00,
        crescimento: 12.3
      },
      {
        id: '3',
        nome: 'Jovens Universitários',
        descricao: 'Estudantes universitários e recém-formados de 18 a 28 anos',
        cor: '#10B981',
        tamanhoReal: 234567,
        taxaConversao: 0.22,
        custoMedioAquisicao: 8.90,
        valorVidaEleitor: 220.00,
        crescimento: 25.1
      },
      {
        id: '4',
        nome: 'Trabalhadores Rurais',
        descricao: 'Produtores rurais, trabalhadores do agronegócio e comunidades rurais',
        cor: '#F59E0B',
        tamanhoReal: 89123,
        taxaConversao: 0.31,
        custoMedioAquisicao: 18.20,
        valorVidaEleitor: 520.00,
        crescimento: 8.9
      },
      {
        id: '5',
        nome: 'Aposentados e Pensionistas',
        descricao: 'Pessoas aposentadas e pensionistas acima de 60 anos',
        cor: '#8B5CF6',
        tamanhoReal: 156789,
        taxaConversao: 0.42,
        custoMedioAquisicao: 22.10,
        valorVidaEleitor: 680.00,
        crescimento: 5.2
      }
    ];

    const campanhasSimuladas: CampanhaResumo[] = [
      {
        id: '1',
        nome: 'Campanha Propostas Econômicas',
        tipo: 'EMAIL_MARKETING',
        status: 'CONCLUIDA',
        totalEnviados: 450000,
        taxaEntrega: 0.94,
        taxaAbertura: 0.28,
        taxaClique: 0.12,
        taxaConversao: 0.08,
        roi: 340,
        dataInicio: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000)
      },
      {
        id: '2',
        nome: 'Mobilização WhatsApp',
        tipo: 'WHATSAPP_MARKETING',
        status: 'EM_EXECUCAO',
        totalEnviados: 280000,
        taxaEntrega: 0.98,
        taxaAbertura: 0.85,
        taxaClique: 0.35,
        taxaConversao: 0.22,
        roi: 520,
        dataInicio: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)
      },
      {
        id: '3',
        nome: 'Evento Digital Juventude',
        tipo: 'EVENTO_DIGITAL',
        status: 'AGENDADA',
        totalEnviados: 120000,
        taxaEntrega: 0.92,
        taxaAbertura: 0.45,
        taxaClique: 0.18,
        taxaConversao: 0.15,
        roi: 280,
        dataInicio: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000)
      }
    ];

    setMetricas(metricasSimuladas);
    setEleitores(eleitoresSimulados);
    setSegmentos(segmentosSimulados);
    setCampanhas(campanhasSimuladas);
  }, [candidateId]);

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'EMBAIXADOR': return 'bg-purple-500/20 text-purple-300 border-purple-500/30';
      case 'APOIADOR': return 'bg-green-500/20 text-green-300 border-green-500/30';
      case 'SIMPATIZANTE': return 'bg-blue-500/20 text-blue-300 border-blue-500/30';
      case 'INTERESSADO': return 'bg-yellow-500/20 text-yellow-300 border-yellow-500/30';
      case 'LEAD': return 'bg-gray-500/20 text-gray-300 border-gray-500/30';
      case 'INATIVO': return 'bg-slate-500/20 text-slate-300 border-slate-500/30';
      case 'ADVERSARIO': return 'bg-red-500/20 text-red-300 border-red-500/30';
      default: return 'bg-slate-500/20 text-slate-300 border-slate-500/30';
    }
  };

  const getScoreColor = (score: number) => {
    if (score >= 800) return 'text-purple-400';
    if (score >= 600) return 'text-green-400';
    if (score >= 400) return 'text-yellow-400';
    if (score >= 200) return 'text-orange-400';
    return 'text-red-400';
  };

  const formatTempo = (data: Date) => {
    const agora = new Date();
    const diff = agora.getTime() - data.getTime();
    const minutos = Math.floor(diff / (1000 * 60));
    
    if (minutos < 1) return 'Agora';
    if (minutos < 60) return `${minutos}min atrás`;
    const horas = Math.floor(minutos / 60);
    if (horas < 24) return `${horas}h atrás`;
    const dias = Math.floor(horas / 24);
    return `${dias}d atrás`;
  };

  const formatNumero = (num: number) => {
    if (num >= 1000000) return `${(num / 1000000).toFixed(1)}M`;
    if (num >= 1000) return `${(num / 1000).toFixed(1)}K`;
    return num.toString();
  };

  // Dados para gráficos
  const dadosEvolucao = [
    { mes: 'Jan', eleitores: 1200000, apoiadores: 240000, embaixadores: 12000 },
    { mes: 'Fev', eleitores: 1450000, apoiadores: 290000, embaixadores: 14500 },
    { mes: 'Mar', eleitores: 1720000, apoiadores: 344000, embaixadores: 17200 },
    { mes: 'Abr', eleitores: 2100000, apoiadores: 420000, embaixadores: 21000 },
    { mes: 'Mai', eleitores: 2380000, apoiadores: 476000, embaixadores: 23800 },
    { mes: 'Jun', eleitores: 2650000, apoiadores: 530000, embaixadores: 26500 },
    { mes: 'Jul', eleitores: 2847392, apoiadores: 569478, embaixadores: 28474 }
  ];

  const dadosCanais = [
    { canal: 'WhatsApp', eleitores: 1138957, percentual: 40 },
    { canal: 'Instagram', eleitores: 569478, percentual: 20 },
    { canal: 'Facebook', eleitores: 454783, percentual: 16 },
    { canal: 'Email', eleitores: 341087, percentual: 12 },
    { canal: 'SMS', eleitores: 227391, percentual: 8 },
    { canal: 'Presencial', eleitores: 113696, percentual: 4 }
  ];

  const coresCanais = ['#25D366', '#E4405F', '#1877F2', '#EA4335', '#FF6B35', '#8B5CF6'];

  return (
    <div className="space-y-6 fade-in">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-white">CRM Eleitoral</h1>
          <p className="text-slate-400 mt-1">
            Gestão completa de relacionamento com eleitores • {formatNumero(2847392)} eleitores ativos
          </p>
        </div>
        
        <div className="flex items-center space-x-3">
          <select
            className="px-3 py-2 bg-slate-800/50 border border-slate-600 rounded-lg text-white focus:outline-none focus:border-blue-500"
            value={filtroTempo}
            onChange={(e) => setFiltroTempo(e.target.value)}
          >
            <option value="7d">Últimos 7 dias</option>
            <option value="30d">Últimos 30 dias</option>
            <option value="90d">Últimos 90 dias</option>
            <option value="1y">Último ano</option>
          </select>
          
          <Button className="bg-green-600 hover:bg-green-700">
            <UserPlus className="w-4 h-4 mr-2" />
            Novo Eleitor
          </Button>
          
          <Button className="bg-blue-600 hover:bg-blue-700">
            <Send className="w-4 h-4 mr-2" />
            Nova Campanha
          </Button>
          
          <Button variant="outline">
            <Download className="w-4 h-4 mr-2" />
            Exportar
          </Button>
        </div>
      </div>

      {/* Métricas Principais */}
      <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-8 gap-4">
        {metricas.map((metrica, index) => {
          const Icon = metrica.icone;
          return (
            <motion.div
              key={index}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: index * 0.1 }}
            >
              <Card className={`glass-card ${
                metrica.status === 'excelente' ? 'border-green-500/30 bg-green-500/5' :
                metrica.status === 'bom' ? 'border-blue-500/30 bg-blue-500/5' :
                metrica.status === 'atencao' ? 'border-yellow-500/30 bg-yellow-500/5' :
                'border-red-500/30 bg-red-500/5'
              }`}>
                <CardContent className="p-4 text-center">
                  <div className="flex items-center justify-center mb-2">
                    <Icon className={`w-5 h-5 ${
                      metrica.status === 'excelente' ? 'text-green-400' :
                      metrica.status === 'bom' ? 'text-blue-400' :
                      metrica.status === 'atencao' ? 'text-yellow-400' :
                      'text-red-400'
                    }`} />
                  </div>
                  <div className="text-xl font-bold text-white mb-1">{metrica.valor}</div>
                  <div className="text-xs text-slate-400 mb-1">{metrica.label}</div>
                  {metrica.variacao && (
                    <div className={`text-xs flex items-center justify-center ${
                      metrica.variacao > 0 ? 'text-green-400' : 'text-red-400'
                    }`}>
                      {metrica.variacao > 0 ? <TrendingUp className="w-3 h-3 mr-1" /> : <TrendingDown className="w-3 h-3 mr-1" />}
                      {Math.abs(metrica.variacao)}%
                    </div>
                  )}
                  {metrica.meta && (
                    <div className="mt-2">
                      <div className="w-full bg-slate-700 rounded-full h-1">
                        <div 
                          className={`h-1 rounded-full ${
                            metrica.status === 'excelente' ? 'bg-green-500' :
                            metrica.status === 'bom' ? 'bg-blue-500' :
                            metrica.status === 'atencao' ? 'bg-yellow-500' :
                            'bg-red-500'
                          }`}
                          style={{ 
                            width: `${Math.min(100, (parseFloat(metrica.valor.toString().replace(/[^\d.]/g, '')) / metrica.meta) * 100)}%` 
                          }}
                        />
                      </div>
                      <div className="text-xs text-slate-500 mt-1">Meta: {formatNumero(metrica.meta)}</div>
                    </div>
                  )}
                </CardContent>
              </Card>
            </motion.div>
          );
        })}
      </div>

      {/* Tabs de Navegação */}
      <Tabs value={modoVisualizacao} onValueChange={(value: any) => setModoVisualizacao(value)}>
        <TabsList className="grid w-full grid-cols-6">
          <TabsTrigger value="dashboard">Dashboard</TabsTrigger>
          <TabsTrigger value="eleitores">Eleitores</TabsTrigger>
          <TabsTrigger value="segmentos">Segmentos</TabsTrigger>
          <TabsTrigger value="campanhas">Campanhas</TabsTrigger>
          <TabsTrigger value="funil">Funil</TabsTrigger>
          <TabsTrigger value="analytics">Analytics</TabsTrigger>
        </TabsList>

        {/* Dashboard Principal */}
        <TabsContent value="dashboard" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Evolução de Eleitores */}
            <Card className="glass-card">
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    <TrendingUp className="w-5 h-5 text-blue-400" />
                    <span>Evolução de Eleitores</span>
                  </div>
                  <Badge variant="outline" className="text-green-400 border-green-400">
                    +12.5% este mês
                  </Badge>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <ResponsiveContainer width="100%" height={300}>
                  <AreaChart data={dadosEvolucao}>
                    <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
                    <XAxis dataKey="mes" stroke="#9CA3AF" />
                    <YAxis stroke="#9CA3AF" tickFormatter={formatNumero} />
                    <Tooltip 
                      contentStyle={{ 
                        backgroundColor: '#1F2937', 
                        border: '1px solid #374151',
                        borderRadius: '8px'
                      }}
                      formatter={(value: any) => [formatNumero(value), '']}
                    />
                    <Area 
                      type="monotone" 
                      dataKey="eleitores" 
                      stackId="1"
                      stroke="#3B82F6" 
                      fill="#3B82F6" 
                      fillOpacity={0.3}
                      name="Total de Eleitores"
                    />
                    <Area 
                      type="monotone" 
                      dataKey="apoiadores" 
                      stackId="2"
                      stroke="#10B981" 
                      fill="#10B981" 
                      fillOpacity={0.3}
                      name="Apoiadores"
                    />
                    <Area 
                      type="monotone" 
                      dataKey="embaixadores" 
                      stackId="3"
                      stroke="#8B5CF6" 
                      fill="#8B5CF6" 
                      fillOpacity={0.3}
                      name="Embaixadores"
                    />
                  </AreaChart>
                </ResponsiveContainer>
              </CardContent>
            </Card>

            {/* Distribuição por Canais */}
            <Card className="glass-card">
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <PieChart className="w-5 h-5 text-purple-400" />
                  <span>Distribuição por Canais</span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <ResponsiveContainer width="100%" height={300}>
                  <RechartsPieChart>
                    <Pie
                      data={dadosCanais}
                      cx="50%"
                      cy="50%"
                      outerRadius={100}
                      dataKey="eleitores"
                      label={({ canal, percentual }) => `${canal} (${percentual}%)`}
                    >
                      {dadosCanais.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={coresCanais[index % coresCanais.length]} />
                      ))}
                    </Pie>
                    <Tooltip 
                      contentStyle={{ 
                        backgroundColor: '#1F2937', 
                        border: '1px solid #374151',
                        borderRadius: '8px'
                      }}
                      formatter={(value: any) => [formatNumero(value), 'Eleitores']}
                    />
                  </RechartsPieChart>
                </ResponsiveContainer>
              </CardContent>
            </Card>
          </div>

          {/* Top Eleitores e Segmentos */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Top Eleitores */}
            <Card className="glass-card">
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    <Award className="w-5 h-5 text-yellow-400" />
                    <span>Top Eleitores</span>
                  </div>
                  <Button size="sm" variant="outline">Ver Todos</Button>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {eleitores
                  .sort((a, b) => b.score - a.score)
                  .slice(0, 5)
                  .map((eleitor, index) => (
                    <motion.div
                      key={eleitor.id}
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: index * 0.1 }}
                      className="flex items-center justify-between p-3 bg-slate-800/30 rounded-lg hover:bg-slate-800/50 transition-all cursor-pointer"
                    >
                      <div className="flex items-center space-x-3">
                        <div className={`w-8 h-8 rounded-full flex items-center justify-center text-xs font-bold ${
                          index === 0 ? 'bg-yellow-500 text-black' :
                          index === 1 ? 'bg-gray-400 text-black' :
                          index === 2 ? 'bg-orange-600 text-white' :
                          'bg-slate-600 text-white'
                        }`}>
                          {index + 1}
                        </div>
                        <div>
                          <h4 className="font-medium text-white text-sm">{eleitor.nome}</h4>
                          <p className="text-xs text-slate-400">{eleitor.cidade}, {eleitor.estado}</p>
                        </div>
                      </div>
                      
                      <div className="text-right">
                        <div className={`text-sm font-bold ${getScoreColor(eleitor.score)}`}>
                          {eleitor.score}
                        </div>
                        <Badge className={getStatusColor(eleitor.status)}>
                          {eleitor.status}
                        </Badge>
                      </div>
                    </motion.div>
                  ))}
              </CardContent>
            </Card>

            {/* Top Segmentos */}
            <Card className="glass-card">
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    <Target className="w-5 h-5 text-green-400" />
                    <span>Segmentos de Alto Valor</span>
                  </div>
                  <Button size="sm" variant="outline">Gerenciar</Button>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {segmentos
                  .sort((a, b) => b.valorVidaEleitor - a.valorVidaEleitor)
                  .slice(0, 5)
                  .map((segmento, index) => (
                    <motion.div
                      key={segmento.id}
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: index * 0.1 }}
                      className="p-3 bg-slate-800/30 rounded-lg hover:bg-slate-800/50 transition-all cursor-pointer"
                    >
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center space-x-3">
                          <div 
                            className="w-4 h-4 rounded-full"
                            style={{ backgroundColor: segmento.cor }}
                          />
                          <h4 className="font-medium text-white text-sm">{segmento.nome}</h4>
                        </div>
                        <div className="text-right">
                          <div className="text-sm font-bold text-green-400">
                            R$ {segmento.valorVidaEleitor.toFixed(0)}
                          </div>
                          <div className="text-xs text-slate-400">CLV</div>
                        </div>
                      </div>
                      
                      <div className="grid grid-cols-3 gap-3 text-xs">
                        <div className="text-center">
                          <div className="text-blue-400 font-medium">{formatNumero(segmento.tamanhoReal)}</div>
                          <div className="text-slate-400">Eleitores</div>
                        </div>
                        <div className="text-center">
                          <div className="text-purple-400 font-medium">{(segmento.taxaConversao * 100).toFixed(1)}%</div>
                          <div className="text-slate-400">Conversão</div>
                        </div>
                        <div className="text-center">
                          <div className={`font-medium ${segmento.crescimento > 0 ? 'text-green-400' : 'text-red-400'}`}>
                            {segmento.crescimento > 0 ? '+' : ''}{segmento.crescimento.toFixed(1)}%
                          </div>
                          <div className="text-slate-400">Crescimento</div>
                        </div>
                      </div>
                    </motion.div>
                  ))}
              </CardContent>
            </Card>
          </div>

          {/* Campanhas Recentes */}
          <Card className="glass-card">
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <Send className="w-5 h-5 text-blue-400" />
                  <span>Campanhas Recentes</span>
                </div>
                <Button size="sm" className="bg-blue-600 hover:bg-blue-700">
                  Nova Campanha
                </Button>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead>
                    <tr className="border-b border-slate-700">
                      <th className="text-left py-3 px-4 text-slate-400 font-medium">Campanha</th>
                      <th className="text-left py-3 px-4 text-slate-400 font-medium">Tipo</th>
                      <th className="text-left py-3 px-4 text-slate-400 font-medium">Status</th>
                      <th className="text-right py-3 px-4 text-slate-400 font-medium">Enviados</th>
                      <th className="text-right py-3 px-4 text-slate-400 font-medium">Taxa Entrega</th>
                      <th className="text-right py-3 px-4 text-slate-400 font-medium">Taxa Abertura</th>
                      <th className="text-right py-3 px-4 text-slate-400 font-medium">Taxa Clique</th>
                      <th className="text-right py-3 px-4 text-slate-400 font-medium">ROI</th>
                    </tr>
                  </thead>
                  <tbody>
                    {campanhas.map((campanha, index) => (
                      <motion.tr
                        key={campanha.id}
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ delay: index * 0.1 }}
                        className="border-b border-slate-800 hover:bg-slate-800/30 transition-all cursor-pointer"
                      >
                        <td className="py-3 px-4">
                          <div>
                            <div className="font-medium text-white text-sm">{campanha.nome}</div>
                            <div className="text-xs text-slate-400">{formatTempo(campanha.dataInicio)}</div>
                          </div>
                        </td>
                        <td className="py-3 px-4">
                          <Badge variant="outline" className="text-xs">
                            {campanha.tipo.replace('_', ' ')}
                          </Badge>
                        </td>
                        <td className="py-3 px-4">
                          <Badge className={
                            campanha.status === 'CONCLUIDA' ? 'bg-green-500/20 text-green-300 border-green-500/30' :
                            campanha.status === 'EM_EXECUCAO' ? 'bg-blue-500/20 text-blue-300 border-blue-500/30' :
                            campanha.status === 'AGENDADA' ? 'bg-yellow-500/20 text-yellow-300 border-yellow-500/30' :
                            'bg-slate-500/20 text-slate-300 border-slate-500/30'
                          }>
                            {campanha.status.replace('_', ' ')}
                          </Badge>
                        </td>
                        <td className="py-3 px-4 text-right text-white font-medium">
                          {formatNumero(campanha.totalEnviados)}
                        </td>
                        <td className="py-3 px-4 text-right">
                          <span className={`font-medium ${
                            campanha.taxaEntrega >= 0.9 ? 'text-green-400' :
                            campanha.taxaEntrega >= 0.8 ? 'text-yellow-400' : 'text-red-400'
                          }`}>
                            {(campanha.taxaEntrega * 100).toFixed(1)}%
                          </span>
                        </td>
                        <td className="py-3 px-4 text-right">
                          <span className={`font-medium ${
                            campanha.taxaAbertura >= 0.3 ? 'text-green-400' :
                            campanha.taxaAbertura >= 0.2 ? 'text-yellow-400' : 'text-red-400'
                          }`}>
                            {(campanha.taxaAbertura * 100).toFixed(1)}%
                          </span>
                        </td>
                        <td className="py-3 px-4 text-right">
                          <span className={`font-medium ${
                            campanha.taxaClique >= 0.15 ? 'text-green-400' :
                            campanha.taxaClique >= 0.1 ? 'text-yellow-400' : 'text-red-400'
                          }`}>
                            {(campanha.taxaClique * 100).toFixed(1)}%
                          </span>
                        </td>
                        <td className="py-3 px-4 text-right">
                          <span className={`font-bold ${
                            campanha.roi >= 300 ? 'text-green-400' :
                            campanha.roi >= 200 ? 'text-yellow-400' : 'text-red-400'
                          }`}>
                            {campanha.roi}%
                          </span>
                        </td>
                      </motion.tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Outras tabs */}
        <TabsContent value="eleitores">
          <div className="text-center py-12 text-slate-400">
            <Users className="w-16 h-16 mx-auto mb-4 opacity-50" />
            <h3 className="text-xl font-medium mb-2">Lista de Eleitores</h3>
            <p>Funcionalidade em desenvolvimento</p>
          </div>
        </TabsContent>

        <TabsContent value="segmentos">
          <div className="text-center py-12 text-slate-400">
            <Target className="w-16 h-16 mx-auto mb-4 opacity-50" />
            <h3 className="text-xl font-medium mb-2">Gestão de Segmentos</h3>
            <p>Funcionalidade em desenvolvimento</p>
          </div>
        </TabsContent>

        <TabsContent value="campanhas">
          <div className="text-center py-12 text-slate-400">
            <Send className="w-16 h-16 mx-auto mb-4 opacity-50" />
            <h3 className="text-xl font-medium mb-2">Campanhas de Marketing</h3>
            <p>Funcionalidade em desenvolvimento</p>
          </div>
        </TabsContent>

        <TabsContent value="funil">
          <div className="text-center py-12 text-slate-400">
            <BarChart3 className="w-16 h-16 mx-auto mb-4 opacity-50" />
            <h3 className="text-xl font-medium mb-2">Funil de Conversão</h3>
            <p>Funcionalidade em desenvolvimento</p>
          </div>
        </TabsContent>

        <TabsContent value="analytics">
          <div className="text-center py-12 text-slate-400">
            <Activity className="w-16 h-16 mx-auto mb-4 opacity-50" />
            <h3 className="text-xl font-medium mb-2">Analytics Avançados</h3>
            <p>Funcionalidade em desenvolvimento</p>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
}
